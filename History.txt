=== v0.1.8 / 2009-04-27
* Add two-level caching for syncing of content and database content.  First cache is locally in :tmp_dir (defaults to tmp/capistrano/), second is on the server in #{shared_path}
* When syncing the database, automatically drop the target database (after backing it up) to eliminate the need to manually run rake db:drop db:create on the target server.
* Add util::tmp::check, which will alert you with red messages when your local cache grows too big (> 50MB or > 10 files)
* Expose :store_remote_backups and :store_dev_backups to turn on/off data/content backup when syncing.
* Introduce :remote_backup_expires to set the expiry time in seconds for the remote cache (defaults to 2 days)
* Via :zip, :unzip, and :zip_ext, allow user to choose their compression algorithm
* Introduce :exclude_paths, which is basically a wrapper for :copy_exclude.  :copy_exclude is now preset to exclude all environment directories (particularly helpful for users of environmentalist) that are not being deployed to.
* Change default :deploy_to to "/var/vhosts/#{application}"
* Change default :deployable_environments to [:staging]
* Change default :deploy_via to :copy
* Change default :copy_cache to { File.expand_path("~/.capistrano/#{application}") }, which allows us to blindly use the user's home directory.
* Move gem management to Jeweler

=== v0.1.5 / 2009-02-22
* Fixed local:restore_content to work better with :content_directories.

=== v0.1.4 / 2008-09-12
* In local:restore_db, the db import would previously fail if the username was not specified in your database.yml
  file.  I have corrected this and set it to default to 'root' now (as rails does).

* Moved a lot of the information/instructions out of the README and onto the github wiki
  (http://github.com/jtrupiano/capistrano-extensions/wikis/home).
  
* Started hosting the gem at rubyforge.  You can now install directly from gem without downloading the source!

=== v0.1.3 / 2008-08-25
* Introduced a new property :shared_content, which is intended to completely replace :content_directories
  eventually.  All directories previously specified by :content_directories go through a simple transformation
  to match the new hash construct that is :shared_content.  Now, we can specify non-public directories (though
  they are still limited to within RAILS_ROOT), e.g.
  
  set(:shared_content) { "feeds" => "content" }
  
  This will create a symlink whose source is #{shared_path}/feeds and whose target is RAILS_ROOT/content.
  Then, on successive deployments, this symlink is just recreated, and all of our feeds are still accessible
  (because they were stored outside of RAILS_ROOT and then symlinked in).

*	Fixed a mysql bug that was encountered in "sync" operations.  When passing a password on the command-line
	(e.g. mysqldump -uuser -ppass), $'s in the password need to be escaped.  I also fixed the scenario where
	there was no password (common for restoring to the development environment).  Previously you would be
	prompted for a password only in the case where there was no password required.  This was a result of 
	the way the mysql commands were being built: "mysql -u#{user} -p#{password}" where password was nil or ""
  	
=== v0.1.2 / 2008-07-20
